//HintName: PureES.AggregateFactories.TestAggregateFactory.g.cs
// <auto-generated/>

// This file was automatically generated by the PureES source generator.
// Do not edit this file manually since it will be automatically overwritten.
// ReSharper disable All

#nullable disable
#pragma warning disable CS0162 //Unreachable code detected

#pragma warning disable CS8019 //Unnecessary using directive
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;

#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete

namespace PureES.AggregateFactories
{
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PureES.SourceGenerator", "1.0.0.0")]
    internal sealed class TestAggregateFactory : global::PureES.IAggregateFactory<global::PureES.Tests.Models.TestAggregate>
    {
        private readonly global::System.IServiceProvider _serviceProvider;

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TestAggregateFactory(global::System.IServiceProvider serviceProvider)
        {
            this._serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
        }
        private static readonly global::System.Type AggregateType = typeof(global::PureES.Tests.Models.TestAggregate);
        private TestAggregateFactory.Services _services;

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ValueTask<global::PureES.Tests.Models.TestAggregate> CreateWhen(global::PureES.EventEnvelope envelope, CancellationToken cancellationToken)
        {
#if NET6_0_OR_GREATER
            global::System.ArgumentNullException.ThrowIfNull(envelope, nameof(envelope));
#else
            if (envelope is null) throw new global::System.ArgumentNullException(nameof(envelope));
#endif
            _services ??= _serviceProvider.GetRequiredService<TestAggregateFactory.Services>();
            global::PureES.Tests.Models.TestAggregate current;
            switch (envelope.Event)
            {
                case global::PureES.Tests.Models.Events.Created e:
                {
                    try
                    {
                        current = global::PureES.Tests.Models.TestAggregate.When(
                            new global::PureES.EventEnvelope<global::PureES.Tests.Models.Events.Created, global::PureES.Tests.Models.Metadata>(envelope));
                    }
                    catch (Exception ex)
                    {
                        throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.When(PureES.EventEnvelope<PureES.Tests.Models.Events.Created, PureES.Tests.Models.Metadata>)", ex);
                    }
                    break;
                }
                default:
                {
                    var eventType = global::PureES.BasicEventTypeMap.GetTypeName(envelope.Event.GetType());
                    throw new global::PureES.RehydrationException(envelope, AggregateType, $"No suitable CreateWhen method found for event '{eventType}'");
                }
            }
            try
            {
                current.GlobalWhen(envelope, cancellationToken);
            }
            catch (Exception ex)
            {
                throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.GlobalWhen(PureES.EventEnvelope, System.Threading.CancellationToken)", ex);
            }
            try
            {
                await current.GlobalWhenAsync(envelope, _services.S0);
            }
            catch (Exception ex)
            {
                throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.GlobalWhenAsync(PureES.EventEnvelope, Microsoft.Extensions.Logging.ILoggerFactory)", ex);
            }
            return ValueTask.FromResult(current);
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public async ValueTask<global::PureES.Tests.Models.TestAggregate> UpdateWhen(global::PureES.EventEnvelope envelope, global::PureES.Tests.Models.TestAggregate current, CancellationToken cancellationToken)
        {
#if NET6_0_OR_GREATER
            global::System.ArgumentNullException.ThrowIfNull(envelope, nameof(envelope));
#else
            if (envelope is null) throw new global::System.ArgumentNullException(nameof(envelope));
#endif
            _services ??= _serviceProvider.GetRequiredService<TestAggregateFactory.Services>();
            switch (envelope.Event)
            {
                case int e:
                {
                    try
                    {
                        await current.When(
                            new global::PureES.Tests.Models.EventEnvelope<int>(envelope),
                            _services.S0);
                    }
                    catch (Exception ex)
                    {
                        throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.When(PureES.Tests.Models.EventEnvelope<int>, Microsoft.Extensions.Logging.ILoggerFactory)", ex);
                    }
                    break;
                }
                case global::PureES.Tests.Models.Events.Updated e:
                {
                    try
                    {
                        current.When(e, _services.S1);
                    }
                    catch (Exception ex)
                    {
                        throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.When(PureES.Tests.Models.Events.Updated, System.IServiceProvider)", ex);
                    }
                    break;
                }
                case global::PureES.Tests.Models.Events.Updated e:
                {
                    try
                    {
                        current = global::PureES.Tests.Models.TestAggregate.UpdateWhenStatic(e, current);
                    }
                    catch (Exception ex)
                    {
                        throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.UpdateWhenStatic(PureES.Tests.Models.Events.Updated, PureES.Tests.Models.TestAggregate)", ex);
                    }
                    break;
                }
                default:
                {
                    var eventType = global::PureES.BasicEventTypeMap.GetTypeName(envelope.Event.GetType());
                    throw new global::PureES.RehydrationException(envelope, AggregateType, $"No suitable UpdateWhen method found for event '{eventType}'");
                }
            }
            try
            {
                current.GlobalWhen(envelope, cancellationToken);
            }
            catch (Exception ex)
            {
                throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.GlobalWhen(PureES.EventEnvelope, System.Threading.CancellationToken)", ex);
            }
            try
            {
                await current.GlobalWhenAsync(envelope, _services.S0);
            }
            catch (Exception ex)
            {
                throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestAggregate.GlobalWhenAsync(PureES.EventEnvelope, Microsoft.Extensions.Logging.ILoggerFactory)", ex);
            }
            return current;
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PureES.SourceGenerator", "1.0.0.0")]
        internal sealed class Services
        {
            public readonly global::Microsoft.Extensions.Logging.ILoggerFactory S0;
            public readonly global::System.IServiceProvider S1;


            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Services(
                global::Microsoft.Extensions.Logging.ILoggerFactory s0,
                global::System.IServiceProvider s1)
            {
                this.S0 = s0;
                this.S1 = s1;
            }
        }
    }
}
