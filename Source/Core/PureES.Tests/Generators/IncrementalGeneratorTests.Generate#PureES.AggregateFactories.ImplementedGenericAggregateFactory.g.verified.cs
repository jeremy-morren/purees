//HintName: PureES.AggregateFactories.ImplementedGenericAggregateFactory.g.cs
// <auto-generated/>

// This file was automatically generated by the PureES source generator.
// Do not edit this file manually since it will be automatically overwritten.
// ReSharper disable All

#nullable disable
#pragma warning disable CS0162 //Unreachable code detected

#pragma warning disable CS8019 //Unnecessary using directive
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;

#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete

namespace PureES.AggregateFactories
{
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PureES.SourceGenerator", "1.0.0.0")]
    internal sealed class ImplementedGenericAggregateFactory : global::PureES.IAggregateFactory<global::PureES.Tests.Models.ImplementedGenericAggregate>
    {

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ImplementedGenericAggregateFactory()
        {
        }
        private static readonly global::System.Type AggregateType = typeof(global::PureES.Tests.Models.ImplementedGenericAggregate);

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ValueTask<global::PureES.Tests.Models.ImplementedGenericAggregate> CreateWhen(global::PureES.EventEnvelope envelope, CancellationToken cancellationToken)
        {
#if NET6_0_OR_GREATER
            global::System.ArgumentNullException.ThrowIfNull(envelope, nameof(envelope));
#else
            if (envelope is null) throw new global::System.ArgumentNullException(nameof(envelope));
#endif
            global::PureES.Tests.Models.ImplementedGenericAggregate current;
            switch (envelope.Event)
            {
                case object e:
                {
                    try
                    {
                        current = global::PureES.Tests.Models.ImplementedGenericAggregate.When(e);
                    }
                    catch (Exception ex)
                    {
                        throw new global::PureES.RehydrationException(envelope, AggregateType, "PureES.Tests.Models.TestGenericAggregate<PureES.Tests.Models.ImplementedGenericAggregate, object, object>.When(object)", ex);
                    }
                    break;
                }
                default:
                {
                    var eventType = global::PureES.BasicEventTypeMap.GetTypeName(envelope.Event.GetType());
                    throw new global::PureES.RehydrationException(envelope, AggregateType, $"No suitable CreateWhen method found for event '{eventType}'");
                }
            }
            return ValueTask.FromResult(current);
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ValueTask<global::PureES.Tests.Models.ImplementedGenericAggregate> UpdateWhen(global::PureES.EventEnvelope envelope, global::PureES.Tests.Models.ImplementedGenericAggregate current, CancellationToken cancellationToken)
        {
#if NET6_0_OR_GREATER
            global::System.ArgumentNullException.ThrowIfNull(envelope, nameof(envelope));
#else
            if (envelope is null) throw new global::System.ArgumentNullException(nameof(envelope));
#endif
            switch (envelope.Event)
            {
                default:
                {
                    var eventType = global::PureES.BasicEventTypeMap.GetTypeName(envelope.Event.GetType());
                    throw new global::PureES.RehydrationException(envelope, AggregateType, $"No suitable UpdateWhen method found for event '{eventType}'");
                }
            }
            return ValueTask.FromResult(current);
        }
    }
}
