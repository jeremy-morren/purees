//HintName: PureES.AggregateStores.AggregateAggregateStore.g.cs
// <auto-generated/>
// This file was automatically generated by the PureES source generator.
// Do not edit this file manually since it will be automatically overwritten.
// ReSharper disable All

#nullable disable

using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;

namespace PureES.AggregateStores
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PureES.SourceGenerator", "1.0.0.0")]
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal class AggregateAggregateStore : global::PureES.Core.IAggregateStore<global::PureES.Core.Tests.Models.TestAggregates.Aggregate>
    {
        private readonly global::PureES.Core.EventStore.IEventStore _eventStore;
        private readonly global::System.IServiceProvider _services;

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AggregateAggregateStore(
            global::PureES.Core.EventStore.IEventStore eventStore,
            global::System.IServiceProvider services)
        {
            this._eventStore = eventStore ?? throw new ArgumentNullException(nameof(eventStore));
            this._services = serviceProvider ?? throw new ArgumentNullException(nameof(services));
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Threading.Tasks.Task<global::PureES.Core.Tests.Models.TestAggregates.Aggregate> Load(string streamId, CancellationToken cancellationToken)
        {
            var @events = this._eventStore.Read(global::PureES.Core.EventStore.Direction.Forwards, streamId, cancellationToken);
            return Create(@events, cancellationToken);
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Threading.Tasks.Task<global::PureES.Core.Tests.Models.TestAggregates.Aggregate> Load(string streamId, ulong expectedRevision, CancellationToken cancellationToken)
        {
            var @events = this._eventStore.Read(global::PureES.Core.EventStore.Direction.Forwards, streamId, expectedRevision, cancellationToken);
            return Create(@events, cancellationToken);
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Threading.Tasks.Task<global::PureES.Core.Tests.Models.TestAggregates.Aggregate> LoadPartial(string streamId, ulong requiredRevision, CancellationToken cancellationToken)
        {
            var @events = this._eventStore.ReadPartial(global::PureES.Core.EventStore.Direction.Forwards, streamId, requiredRevision, cancellationToken);
            return Create(@events, cancellationToken);
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public async global::System.Threading.Tasks.Task<global::PureES.Core.Tests.Models.TestAggregates.Aggregate> Create(global::System.Collections.Generic.IAsyncEnumerable<global::PureES.Core.EventEnvelope> @events, CancellationToken cancellationToken)
        {
            await using (var enumerator = @events.GetAsyncEnumerator(cancellationToken))
            {
                if (!await enumerator.MoveNextAsync())
                {
                    throw new ArgumentException("Stream is empty", nameof(@events));
                }
                global::PureES.Core.Tests.Models.TestAggregates.Aggregate current;
                switch (enumerator.Current.Event)
                {
                    case global::PureES.Core.Tests.Models.Events.Created e:
                    {
                        current = global::PureES.Core.Tests.Models.TestAggregates.Aggregate.When(
                            new global::PureES.Core.EventEnvelope<global::PureES.Core.Tests.Models.Events.Created, global::PureES.Core.Tests.Models.TestAggregates.Metadata>(enumerator.Current));
                        break;
                    }
                    default:
                    {
                        var eventType = enumerator.Current.Event.GetType().FullName;
                        throw new NotImplementedException($"No suitable CreateWhen method found for event {eventType}");
                    }
                }
                current.GlobalWhen(enumerator.Current, cancellationToken);
                await current.GlobalWhenAsync(
                    enumerator.Current,
                    (global::Microsoft.Extensions.Logging.ILoggerFactory)this._services.GetRequiredService(typeof(global::Microsoft.Extensions.Logging.ILoggerFactory)));
                while (await enumerator.MoveNextAsync())
                {
                    switch (enumerator.Current.Event)
                    {
                        case global::PureES.Core.Tests.Models.Events.Updated e:
                        {
                            current.When(e, this._services);
                            break;
                        }
                        case int e:
                        {
                            await current.When(
                                new global::PureES.Core.Tests.Models.TestAggregates.EventEnvelope<int>(enumerator.Current),
                                (global::Microsoft.Extensions.Logging.ILoggerFactory)this._services.GetRequiredService(typeof(global::Microsoft.Extensions.Logging.ILoggerFactory)));
                            break;
                        }
                        case global::PureES.Core.Tests.Models.Events.Updated e:
                        {
                            current = global::PureES.Core.Tests.Models.TestAggregates.Aggregate.UpdateWhenStatic(e, current);
                            break;
                        }
                        default:
                        {
                            var eventType = enumerator.Current.Event.GetType().FullName;
                            throw new NotImplementedException($"No suitable UpdateWhen method found for event {eventType}");
                        }
                    }
                    current.GlobalWhen(enumerator.Current, cancellationToken);
                    await current.GlobalWhenAsync(
                        enumerator.Current,
                        (global::Microsoft.Extensions.Logging.ILoggerFactory)this._services.GetRequiredService(typeof(global::Microsoft.Extensions.Logging.ILoggerFactory)));
                }
                return current;
            }
        }
    }
}
