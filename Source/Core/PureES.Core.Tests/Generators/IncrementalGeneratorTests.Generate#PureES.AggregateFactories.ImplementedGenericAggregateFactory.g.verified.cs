//HintName: PureES.AggregateFactories.ImplementedGenericAggregateFactory.g.cs
// <auto-generated/>

// This file was automatically generated by the PureES source generator.
// Do not edit this file manually since it will be automatically overwritten.
// ReSharper disable All

#nullable disable
#pragma warning disable CS0162 //Unreachable code detected

#pragma warning disable CS8019 //Unnecessary using directive
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;


namespace PureES.AggregateFactories
{
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PureES.SourceGenerator", "1.0.0.0")]
    internal class ImplementedGenericAggregateFactory : global::PureES.Core.IAggregateFactory<global::PureES.Core.Tests.Models.ImplementedGenericAggregate>
    {
        private readonly global::PureES.Core.IEventStore _eventStore;
        private readonly global::System.IServiceProvider _services;

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ImplementedGenericAggregateFactory(
            global::PureES.Core.IEventStore eventStore,
            global::System.IServiceProvider services)
        {
            this._eventStore = eventStore ?? throw new ArgumentNullException(nameof(eventStore));
            this._services = services ?? throw new ArgumentNullException(nameof(services));
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private async Task<global::PureES.Core.Tests.Models.ImplementedGenericAggregate> CreateWhen(global::System.Collections.Generic.IAsyncEnumerator<global::PureES.Core.EventEnvelope> enumerator, CancellationToken ct)
        {
            if (!await enumerator.MoveNextAsync())
            {
                throw new ArgumentException("Stream is empty");
            }
            global::PureES.Core.Tests.Models.ImplementedGenericAggregate current;
            switch (enumerator.Current.Event)
            {
                case object e:
                {
                    current = global::PureES.Core.Tests.Models.ImplementedGenericAggregate.When(e);
                    break;
                }
                default:
                {
                    var eventType = global::PureES.Core.BasicEventTypeMap.GetTypeName(enumerator.Current.Event.GetType());
                    var aggregateType = global::PureES.Core.BasicEventTypeMap.GetTypeName(typeof(global::PureES.Core.Tests.Models.ImplementedGenericAggregate));
                    throw new NotImplementedException($"No suitable CreateWhen method found for event '{eventType}' on '{aggregateType}'");
                }
            }
            return current;
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private async Task<global::PureES.Core.Tests.Models.ImplementedGenericAggregate> UpdateWhen(global::PureES.Core.Tests.Models.ImplementedGenericAggregate current, global::System.Collections.Generic.IAsyncEnumerator<global::PureES.Core.EventEnvelope> enumerator, CancellationToken ct)
        {
            while (await enumerator.MoveNextAsync())
            {
                switch (enumerator.Current.Event)
                {
                    default:
                    {
                        var eventType = global::PureES.Core.BasicEventTypeMap.GetTypeName(enumerator.Current.Event.GetType());
                        var aggregateType = global::PureES.Core.BasicEventTypeMap.GetTypeName(typeof(global::PureES.Core.Tests.Models.ImplementedGenericAggregate));
                        throw new NotImplementedException($"No suitable UpdateWhen method found for event '{eventType}' on '{aggregateType}'");
                    }
                }
            }
            return current;
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public async Task<global::PureES.Core.Tests.Models.ImplementedGenericAggregate> Create(global::System.Collections.Generic.IAsyncEnumerable<global::PureES.Core.EventEnvelope> @events, CancellationToken cancellationToken)
        {
            await using (var enumerator = @events.GetAsyncEnumerator(cancellationToken))
            {
                var aggregate = await CreateWhen(enumerator, cancellationToken);
                return await UpdateWhen(aggregate, enumerator, cancellationToken);
            }
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public async Task<global::PureES.Core.Tests.Models.ImplementedGenericAggregate> Update(global::PureES.Core.Tests.Models.ImplementedGenericAggregate aggregate, global::System.Collections.Generic.IAsyncEnumerable<global::PureES.Core.EventEnvelope> @events, CancellationToken cancellationToken)
        {
            await using (var enumerator = @events.GetAsyncEnumerator(cancellationToken))
            {
                return await UpdateWhen(aggregate, enumerator, cancellationToken);
            }
        }
    }
}
