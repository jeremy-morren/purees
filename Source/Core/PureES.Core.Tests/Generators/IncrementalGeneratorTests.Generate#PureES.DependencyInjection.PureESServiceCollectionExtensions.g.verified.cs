//HintName: PureES.DependencyInjection.PureESServiceCollectionExtensions.g.cs
// <auto-generated/>

// This file was automatically generated by the PureES source generator.
// Do not edit this file manually since it will be automatically overwritten.
// ReSharper disable All

#nullable enable
#pragma warning disable CS0162 //Unreachable code detected

using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace PureES.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PureES.SourceGenerator", "1.0.0.0")]
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal class PureESServiceCollectionExtensions
    {

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static void Register(IServiceCollection services)
        {
            if (services == null)
            {
                throw new ArgumentNullException(nameof(services));
            }

            var registeredServices = new global::System.Collections.Generic.HashSet<global::System.Type>();
            var registeredImplementations = new global::System.Collections.Generic.HashSet<global::System.Type>();
            foreach (var s in services)
            {
                registeredServices.Add(s.ServiceType);
                if (s.ImplementationType != null)
                {
                    registeredImplementations.Add(s.ImplementationType);
                }
            }
            // Aggregate: PureES.Core.Tests.Models.TestAggregate. Command handlers: 5
            if (registeredServices.Contains(typeof(global::PureES.Core.IAggregateStore<global::PureES.Core.Tests.Models.TestAggregate>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.IAggregateStore<global::PureES.Core.Tests.Models.TestAggregate>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.IAggregateStore<global::PureES.Core.Tests.Models.TestAggregate>),
                implementationType: typeof(global::PureES.AggregateStores.TestAggregateAggregateStore),
                lifetime: ServiceLifetime.Transient));
            if (registeredServices.Contains(typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.Create>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.Create>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.Create>),
                implementationType: typeof(global::PureES.CommandHandlers.CreateCommandHandler),
                lifetime: ServiceLifetime.Transient));
            if (registeredServices.Contains(typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.Update>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.Update>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.Update>),
                implementationType: typeof(global::PureES.CommandHandlers.UpdateCommandHandler),
                lifetime: ServiceLifetime.Transient));
            if (registeredServices.Contains(typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.UpdateConstantStream, int[]>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.UpdateConstantStream, int[]>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.ICommandHandler<global::PureES.Core.Tests.Models.Commands.UpdateConstantStream, int[]>),
                implementationType: typeof(global::PureES.CommandHandlers.UpdateConstantStreamCommandHandler),
                lifetime: ServiceLifetime.Transient));
            if (registeredServices.Contains(typeof(global::PureES.Core.ICommandHandler<int[]>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.ICommandHandler<int[]>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.ICommandHandler<int[]>),
                implementationType: typeof(global::PureES.CommandHandlers.CommandHandler),
                lifetime: ServiceLifetime.Transient));
            if (registeredServices.Contains(typeof(global::PureES.Core.ICommandHandler<decimal>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.ICommandHandler<decimal>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.ICommandHandler<decimal>),
                implementationType: typeof(global::PureES.CommandHandlers.DecimalCommandHandler),
                lifetime: ServiceLifetime.Transient));

            // Aggregate: PureES.Core.Tests.Models.ImplementedGenericAggregate. Command handlers: 1
            if (registeredServices.Contains(typeof(global::PureES.Core.IAggregateStore<global::PureES.Core.Tests.Models.ImplementedGenericAggregate>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.IAggregateStore<global::PureES.Core.Tests.Models.ImplementedGenericAggregate>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.IAggregateStore<global::PureES.Core.Tests.Models.ImplementedGenericAggregate>),
                implementationType: typeof(global::PureES.AggregateStores.ImplementedGenericAggregateAggregateStore),
                lifetime: ServiceLifetime.Transient));
            if (registeredServices.Contains(typeof(global::PureES.Core.ICommandHandler<object>)))
            {
                services.RemoveAll(typeof(global::PureES.Core.ICommandHandler<object>));
            }
            services.Add(new ServiceDescriptor(
                serviceType: typeof(global::PureES.Core.ICommandHandler<object>),
                implementationType: typeof(global::PureES.CommandHandlers.ObjectCommandHandler),
                lifetime: ServiceLifetime.Transient));

            // Event Handlers. Count: 2

            if (!registeredImplementations.Contains(typeof(global::PureES.EventHandlers.CreatedEventHandler)))
            {
                services.Add(new ServiceDescriptor(
                    serviceType: typeof(global::PureES.Core.IEventHandler<global::PureES.Core.Tests.Models.Events.Created>),
                    implementationType: typeof(global::PureES.EventHandlers.CreatedEventHandler),
                    lifetime: ServiceLifetime.Transient));
            }

            if (!registeredImplementations.Contains(typeof(global::PureES.EventHandlers.UpdatedEventHandler)))
            {
                services.Add(new ServiceDescriptor(
                    serviceType: typeof(global::PureES.Core.IEventHandler<global::PureES.Core.Tests.Models.Events.Updated>),
                    implementationType: typeof(global::PureES.EventHandlers.UpdatedEventHandler),
                    lifetime: ServiceLifetime.Transient));
            }
            // Event handler parents. Count: 1

            if (!registeredServices.Contains(typeof(global::PureES.Core.Tests.Models.TestEventHandlers)))
            {
                services.Add(new ServiceDescriptor(
                    serviceType: typeof(global::PureES.Core.Tests.Models.TestEventHandlers),
                    implementationType: typeof(global::PureES.Core.Tests.Models.TestEventHandlers),
                    lifetime: ServiceLifetime.Transient));
            }

        }
    }
}
