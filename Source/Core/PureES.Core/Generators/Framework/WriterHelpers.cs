using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using JetBrains.Annotations;

namespace PureES.Core.Generators.Framework;

internal static class WriterHelpers
{
    public static void WriteFileHeader(this IndentedWriter writer, bool enableNullable)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine("// This file was automatically generated by the PureES source generator.");
        writer.WriteLine("// Do not edit this file manually since it will be automatically overwritten.");
        writer.WriteLine("// ReSharper disable All");
        
        writer.WriteLine();
        writer.WriteLine($"#nullable {(enableNullable ? "enable" : "disable")}");
        
        writer.WriteLine();
        writer.WriteLine("using System;");
    }
    
    public static void WriteClassAttributes(this IndentedWriter writer, EditorBrowsableState? editorBrowsableState)
    {
        writer.WriteLine($"[global::{typeof(GeneratedCodeAttribute).FullName}(\"PureES.SourceGenerator\", \"{Version}\")]");
        if (editorBrowsableState.HasValue)
            writer.WriteLine($"[global::{typeof(EditorBrowsableAttribute).FullName}(global::{typeof(EditorBrowsableState).FullName}.{editorBrowsableState})]");
    }

    public static void WriteMethodAttributes(this IndentedWriter writer)
    {
        writer.WriteLine();
        writer.WriteLine($"[global::{typeof(DebuggerStepThroughAttribute).FullName}()]");
        writer.WriteLine($"[global::{typeof(DebuggerNonUserCodeAttribute).FullName}()]");
    }

    private static Version Version => typeof(WriterHelpers).Assembly.GetName().Version;
    
    
    /// <summary>
    /// Writes an indented statement with braces
    /// i.e. <c>header { writeContent }</c>
    /// </summary>
    public static void WriteStatement(this IndentedWriter writer, string header, Action writeContent)
    {
        writer.WriteLine(header);
        writer.PushBrace();
        writeContent();
        writer.PopBrace();
    }
    
    /// <summary>
    /// Writes an indented statement with braces
    /// i.e. <c>header { content }</c>
    /// </summary>
    public static void WriteStatement(this IndentedWriter writer, string header, string content)
    {
        writer.WriteLine(header);
        writer.PushBrace();
        writer.WriteLine(content);
        writer.PopBrace();
    }

    public static void WritePartialTypeDefinition(this IndentedWriter writer, IType type)
    {
        //Build list of types
        var types = new List<IType>() { type};
        var parent = type.ContainingType;
        while (true)
        {
            if (parent == null)
                break;
            types.Add(parent);
            parent = parent.ContainingType;
        }

        //Write them in reverse
        types.Reverse();
        
        writer.WriteLine($"namespace {types[0].Namespace}");
        writer.PushBrace();
        foreach (var p in types)
        {
            writer.WriteLine($"partial class {p.Name}");
            writer.PushBrace();
        }
    }

    public static void PopAllBraces(this IndentedWriter writer)
    {
        while (writer.CurrentIndentLevel > 0)
            writer.PopBrace();
    }
    
    
    public static void WriteParameters(this IndentedWriter writer, params IEnumerable<string>[] argLists)
    {
        writer.WriteParameters(argLists.SelectMany(l => l).ToArray());
    }
    
    public static void WriteParameters(this IndentedWriter writer, params string[] args)
    {
        var str = string.Join(", ", args);
        if (str.Length > (80 - writer.GetIndent().Length))
        {
            //Preceding newline + newline after comma
            str = $"\n{writer.GetIndent(1)}" + string.Join($",\n{writer.GetIndent(1)}", args);
        }
        writer.WriteRaw(str);
    }
    
    public static void WriteLogMessage(this IndentedWriter writer,
        string level,
        string exception, 
        [StructuredMessageTemplate] string message, params string[] args)
    {
        writer.Write($"this._logger?.Log(");
        //ILogger.Log(LogLevel logLevel, Exception? exception, string? message, params object?[] args)
        writer.WriteParameters(new[]
        {
            $"logLevel: LogEventLevel.{level}",
            $"exception: {exception}",
            $"message: \"{message}\"",
        }, args);

        writer.WriteRawLine(");");
    }
}